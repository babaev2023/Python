#!/usr/bin/env python
# coding: utf-8

# Если Ваш интерпретатор сообщает non-ASCII character -
# это значит, надо поставить строку с кодировкой

# Комментарий

# ПЕРЕМЕННЫЕ - "ящики" для хранения данных
# Переменная должна иметь имя -
# латинские буквы, цифры, символы подчёркивания,
# начинается с буквы

# чтобы создать переменную, нужно написать её имя и через
# = присвоить ей значение

peremennaya = 'znachenie'

# 3.8!!! :=, тоже присваивание,
# работает в комбинированных выражениях

print(
'Создана переменная peremennaya, она имеет значение',
peremennaya
)

# Типы данных - основные (литералы),
# которые можно вводить, опираясь на их внешний вид


# Строки - текстовый тип данных!
'Строка в одинарных'
"В двойных"
'''Тройных
одинарных'''

"""тройных
двойных"""

# Строки можно складывать и умножать на число

print('Wera ' + '- ваш преподаватель')
# Эскейп-последовательности (экранирование):
# \n - перенос строки
# \t - табуляция
# \b - стереть символ назад
# \" - двойная кавычка
# \\
# Если НЕТ такой эскейп-последовательности,
# будет выведен бэкслэш (обратная косая черта)
# и последующий символ. Но не надо так делать!
# Если вам нужен \ в строке, ставьте их два.
print('Скоро пойдём пить кофе' + ('\nc\\_/' * 12))
print('')


# А ещё у строк целый набор отличных функций,
# к которым от переменой, содержащей строку
# или от самой строки можно обращаться через
# точку:

print('Wera'.upper())
print('Wera'.lower())
print('Wera Barinova'.split())
print('=^.^='.join("Wera"))
print("(({{[[Onion]])})".strip("{[(}])"))
print("1234563487349".replace('34', "--==--"))

# Целые числа
# не должны начинаться с нуля в десятичной системе,
# если это не ноль (без ведущего нуля)
#  00879
# -45
print(0b1010101010)  # двоичное целое
print(0o735647654)  # восьмиричное
print(0x1bdfbefa)  # 16-ричное

# Вещественные числа float - с плавающей запятой
# точность зависит от величины числа

print(-6.4)
print(-.0)
print(6.)
print(23574.6533e2)  # e - степень десятки *10 в степени 2
print(23574.6533e+2)  # e - степень десятки *10 в степени 2
print(23574.6533e-2)  # e - степень десятки *10 в степени 2

# decimal - для фиксированной запятой

# Комплексные (скобки нужны, иначе сначала - умножение :)
print((6-5j)*(1j-8))

# Логический тип - "истина" или "ложь"
print(True)
print(False)

# сравнение на равенство
print('"a" == "b"', "a" == "b")
a_letter = "a"
# проверка идентичности объектов
print('"a" is a_letter', "a" is a_letter)

# Задание: проверить, как работает сравнение на неравенство
# строк
# чисел разных типов
# строки и числа

# проверить, что True равно единице, а False - нулю

# Специальные логические операторы

print("False and False =", False and False)  # and истинен, когда ОБА истинны

expression = "False and True"
print(expression, "=", eval(expression))  # and истинен, когда ОБА истинны

# Не нужно использовать exec и eval в реальной жизни :)

exec("c = 10")
print("Достали с из строки....", c)

# PEP8 - как красиво и удобно писать на питоне

print(True and False)  # and истинен, когда ОБА истинны
print(True and True)  # and истинен, когда ОБА истинны
print(False or False)  # or истинен, когда ХОТЯ БЫ ОДИН истинен
print(False or True)  # or истинен, когда ХОТЯ БЫ ОДИН истинен
print(True or False)  # or истинен, когда ХОТЯ БЫ ОДИН истинен
print(True or True)  # or истинен, когда ХОТЯ БЫ ОДИН истинен

# Истинность и ложность выражения

if "" == 0:
    print("Пустая строка равна нулю???")
    print("Нет, правда?")
else:  # необязательный!!
    print("Пустая строка не равна нулю")

if not (""):
    print("Но пустая строка ложна")


# Что из этого истина, а что - ложь?

# "", 0, None, False, [], [None], [False], [0], True - True

# endswith
# find
# index
# isdigit
# isidentifier
# islower
